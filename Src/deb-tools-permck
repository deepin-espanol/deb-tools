#!/bin/sh

Fmt='printf'
set -f
IFS="
"

NOT_A_DEB='Error: “%s” is not a valid .deb file.'
FOUND_DEB='Analysing “%s”.'
LOOKING_DEB='Looking for .deb files in “%s”...'
ISSUES_FOUND='Issues found:'
DOESNT_EXIST='“%s” does not exist.'
NO_ROOT_TAG='R'
WRITING_TAG='W'
COMPLEX_TAG='C'
ISSUE_R='R: Files or folders with an owner other than “root”.'
ISSUE_W='W: Files or folders that can be written to by anyone.'
ISSUE_C='C: Package extracts files or folders to unusual locations.'
REPORT_SAVED='Report saved to “%s”.'
MUST_SPECIFY='You must specify at least one file or folder.'

case "${LANGUAGE:-$LANG}" in
es*)
	NOT_A_DEB="Error: «%s» no es archivo .deb válido."
	FOUND_DEB="Analizando «%s»."
	LOOKING_DEB="Buscando archivos .deb en «%s»..."
	ISSUES_FOUND="Problemas encontrados:"
	DOESNT_EXIST="«%s» no existe."
	NO_ROOT_TAG="R"
	WRITING_TAG="E"
	COMPLEX_TAG="C"
	ISSUE_R="R: Archivos o carpetas con un propietario distinto de «root»."
	ISSUE_W="E: Archivos o carpetas en los que puede escribir cualquiera."
	ISSUE_C="C: El paquete extrae archivos o carpetas a ubicaciones inusuales."
	REPORT_SAVED="Informe guardado en «%s»."
	MUST_SPECIFY="Debe especificar al menos un archivo o carpeta."
	;;
esac

WORK_FOLDER="$HOME/deb-tools"
REPORT_FOLDER="${WORK_FOLDER}/deb-issue-report"
REPORT_DATE=$(date +%Y-%m-%d_%H.%M.%S)
REPORT_FILE="${REPORT_FOLDER}/${REPORT_DATE}.log"
LOGGING=""

AnalyseDeb() {
	FILE=$*
	ISSUES=false

	if ! dpkg-deb --info "$FILE" >/dev/null 2>&1; then # It is not a valid .deb file!
		$Fmt >&2 "$NOT_A_DEB\n" "$FILE"
		return 1
	fi

	$Fmt "$FOUND_DEB\n" "$FILE"

	TAGS=""

	LIST=$(dpkg-deb --contents "$FILE")
	LIST_COMPLEX=$(echo "$LIST" | grep -Ev " ./bin/| ./etc/| ./lib/| ./opt/| ./sbin/| ./usr/| ./tmp/| ./var/tmp/| ./$")
	LIST_NO_ROOT=$(echo "$LIST" | grep -Ev " root/root | 0/0 ")
	LIST_OTHERS_WRITING=$(echo "$LIST" | grep -E "^(d|-).......w. ")

	if [ "$LIST_NO_ROOT" ]; then
		TAGS="$NO_ROOT_TAG;"
		ISSUES=true
	else
		TAGS="-;"
	fi

	if [ "$LIST_OTHERS_WRITING" ]; then
		TAGS="${TAGS}$WRITING_TAG;"
		ISSUES=true
	else
		TAGS="${TAGS}-;"
	fi

	if [ "$LIST_COMPLEX" ]; then
		TAGS="${TAGS}$COMPLEX_TAG;"
	else
		TAGS="${TAGS}-;"
	fi

	if [ $ISSUES = true ]; then
		echo "${TAGS}${FILE}" >>"$REPORT_FILE"
		SPACED_TAGS=$(echo "$TAGS" | sed -e "s|^| |; s|;|  |g")
		LOGGING=$($Fmt "${LOGGING}\n${SPACED_TAGS}${FILE}")
	fi

	return 0
}

LocateDebs() {
	$Fmt "$LOOKING_DEB\n" "$@"
	LIST_FILES=$(find "$@" -type f -iname "*.deb")

	for i in $LIST_FILES; do
		AnalyseDeb "$i"
	done

	return 0
}

DrawLine() {
	echo
	$Fmt '─%.s' $(seq "$(stty size | cut -d" " -f2)")
	echo
}

if [ "$@" ]; then
	mkdir -p "$WORK_FOLDER"
	mkdir -p "$REPORT_FOLDER"

	for i in "$@"; do
		if [ -f "$i" ]; then
			AnalyseDeb "$i"
		elif [ -d "$i" ]; then
			LocateDebs "$i"
		else
			$Fmt >&2 "$DOESNT_EXIST\n" "$i"
		fi
	done

	# Remove the line break from the first line.
	LOGGING=$(echo "$LOGGING" | sed "1d")

	DrawLine
	echo "$ISSUES_FOUND"
	$Fmt "%s" "$LOGGING"
	$Fmt "\n\n"
	echo "$ISSUE_R"
	echo "$ISSUE_W"
	echo "$ISSUE_C"

	if [ -f "$REPORT_FILE" ]; then
		$Fmt "\n"
		$Fmt "$REPORT_SAVED\n" "$REPORT_FILE"
	fi
else
	echo >&2 "$MUST_SPECIFY"
	exit 1
fi

set +f
unset IFS

exit 0
